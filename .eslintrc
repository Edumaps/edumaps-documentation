{
        "extends": "eslint:recommended", // extend and overwrite anyway below - it's a just incase something is missed below scenario

        "ecmaFeatures": {
                "modules": true,
                "experimentalObjectRestSpread": true,
                "jsx": true
        },

        "env": {
                "browser": true,     // browser global variables.
                "node": true,        // Node.js global variables and Node.js-specific rules.
                "amd": true,         // defines require() and define() as global variables as per the amd spec.
                "mocha": true,       // adds all of the Mocha testing global variables.
                "jasmine": true,     // adds all of the Jasmine testing global variables for version 1.3 and 2.0.
                "phantomjs": true,   // phantomjs global variables.
                "shelljs": true,     // shelljs global variables.
                "es6": true,
                "meteor": true,
                "mongo": true,
                "commonjs": true
        },

        "globals": {

            "document": true,
            "navigator": true,
            "window": true,
            "console": true

        },

        "plugins": [
                "react"
        ],

        "rules": {

                ////////// Possible Errors //////////

                "comma-dangle": [2, "never"],         // disallow trailing commas in object literals
                "no-cond-assign": 2,          // disallow assignment in conditional expressions
                "no-console": 2,              // disallow use of console (off by default in the node environment)
                "no-constant-condition": 2,   // disallow use of constant expressions in conditions
                "no-control-regex": 2,        // disallow control characters in regular expressions
                "no-debugger": 2,             // disallow use of debugger
                "no-dupe-keys": 2,            // disallow duplicate keys when creating object literals
                "no-empty": 2,                // disallow empty statements
                "no-empty-character-class": 2,  // disallow the use of empty character classes in regular expressions
                "no-ex-assign": 2,            // disallow assigning to the exception in a catch block
                "no-extra-boolean-cast": 2,   // disallow double-negation boolean casts in a boolean context
                "no-extra-parens": 0,         // disallow unnecessary parentheses (off by default)
                "no-extra-semi": 2,           // disallow unnecessary semicolons
                "no-func-assign": 2,          // disallow overwriting functions written as function declarations
                "no-inner-declarations": 2,   // disallow function or variable declarations in nested blocks
                "no-invalid-regexp": 2,       // disallow invalid regular expression strings in the RegExp constructor
                "no-irregular-whitespace": 2, // disallow irregular whitespace outside of strings and comments
                "no-negated-in-lhs": 2,       // disallow negation of the left operand of an in expression
                "no-obj-calls": 2,            // disallow the use of object properties of the global object (Math and JSON) as functions
                "no-regex-spaces": 2,         // disallow multiple spaces in a regular expression literal
                "no-sparse-arrays": 2,        // disallow sparse arrays
                "no-unreachable": 2,          // disallow unreachable statements after a return, throw, continue, or break statement
                "use-isnan": 2,               // disallow comparisons with the value NaN
                "valid-jsdoc": [0, {
                        "prefer": {
                                "memberOf": "memberof",
                                "return": "returns",
                                "instance": "instance"
                        },
                        "requireReturn": false,
                        "requireReturnDescription": true
                }],
                "valid-typeof": 2,            // Ensure that the results of typeof are compared against a valid string


                ////////// Best Practices //////////

                "accessor-pairs": 2,        // Enforces getter/setter pairs in objects
                "block-scoped-var": 2,      // treat var statements as if they were block scoped (off by default)
                "complexity": [2, 10],       // specify the maximum cyclomatic complexity allowed in a program (off by default)
                "consistent-return": 2,     // require return statements to either always or never specify values
                "curly": 0,                 // specify curly brace conventions for all control statements
                "default-case": 2,          // require default case in switch statements (off by default)
                "dot-notation": 2,          // encourages use of dot notation whenever possible
                "eqeqeq": 2,                // require the use of === and !==
                "guard-for-in": 2,          // make sure for-in loops have an if statement (off by default)
                "no-alert": 2,              // disallow the use of alert, confirm, and prompt
                "no-caller": 2,             // disallow use of arguments.caller or arguments.callee
                "no-div-regex": 2,          // disallow division operators explicitly at beginning of regular expression (off by default)
                "no-else-return": 2,        // disallow else after a return in an if (off by default)
                "no-eq-null": 2,            // disallow comparisons to null without a type-checking operator (off by default)
                "no-eval": 2,               // disallow use of eval()
                "no-extend-native": 2,      // disallow adding to native types
                "no-extra-bind": 2,         // disallow unnecessary function binding
                "no-fallthrough": 0,        // disallow fallthrough of case statements
                "no-floating-decimal": 2,   // disallow the use of leading or trailing decimal points in numeric literals (off by default)
                "no-implicit-coercion": 2,  // disallow the type conversions with shorter notations
                "no-implied-eval": 2,       // disallow use of eval()-like methods
                "no-iterator": 2,           // disallow usage of __iterator__ property
                "no-labels": 2,             // disallow use of labeled statements
                "no-lone-blocks": 2,        // disallow unnecessary nested blocks
                "no-loop-func": 2,          // disallow creation of functions within loops
                "no-multi-spaces": 2,       // disallow use of multiple spaces
                "no-multi-str": 2,          // disallow use of multiline strings
                "no-native-reassign": 2,    // disallow reassignments of native objects
                "no-new": 2,                // disallow use of new operator when not part of the assignment or comparison
                "no-new-func": 2,           // disallow use of new operator for Function object
                "no-new-wrappers": 2,       // disallows creating new instances of String, Number, and Boolean
                "no-octal": 2,              // disallow use of octal literals
                "no-octal-escape": 2,       // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
                "no-process-env": 2,        // disallow use of process.env (off by default)
                "no-proto": 2,              // disallow usage of __proto__ property
                "no-redeclare": [2, { "builtinGlobals": true }],          // disallow declaring the same variable more then once
                "no-return-assign": 0,      // disallow use of assignment in return statement
                "no-script-url": 2,         // disallow use of javascript: urls.
                "no-self-compare": 2,       // disallow comparisons where both sides are exactly the same (off by default)
                "no-sequences": 2,          // disallow use of comma operator
                "no-throw-literal": 2,      // restrict what can be thrown as an exception
                "no-unused-expressions": 2, // disallow usage of expressions in statement position
                "no-useless-call": 2,       // disallow unnecessary .call() and .apply()
                "no-useless-concat": 2,     // disallow unnecessary concatenation of literals or template literals
                "no-void": 0,               // disallow use of void operator (off by default)
                "no-warning-comments": 0,   // disallow usage of configurable warning terms in comments, e.g. TODO or FIXME (off by default)
                "no-with": 2,               // disallow use of the with statement
                "radix": 2,                 // require use of the second argument for parseInt() (off by default)
                "vars-on-top": 2,           // requires to declare all vars on top of their containing scope (off by default)
                "wrap-iife": [2, "outside"], // require immediate function invocation to be wrapped in parentheses (off by default)
                "yoda": [2, "never"],       // require or disallow Yoda conditions


                ////////// Strict Mode //////////

                "strict": 0,          // controls location of Use Strict Directives


                ////////// Variables //////////

                "no-catch-shadow": 2,             // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
                "no-delete-var": 2,               // disallow deletion of variables
                "no-label-var": 2,                // disallow labels that share a name with a variable
                "no-shadow": 2,                   // disallow declaration of variables already declared in the outer scope
                "no-shadow-restricted-names": 2,  // disallow shadowing of names such as arguments
                "no-undef": [2, { typeof: true }],   // disallow use of undeclared variables unless mentioned in a /*global */ block
                "no-undef-init": 2,               // disallow use of undefined when initializing variables
                "no-undefined": 2,                // disallow use of undefined variable (off by default)
                "no-unused-vars": [2, {"vars": "local", "args": "all"}],              // disallow declaration of variables that are not used in the code
                "no-use-before-define": 2,        // disallow use of variables before they are defined
                "init-declarations": 0,           // enforce or disallow variable initializations at definition


                ////////// Node.js //////////

                "handle-callback-err": 2,       // enforces error handling in callbacks (off by default) (on by default in the node environment)
                "no-mixed-requires": 0,         // disallow mixing regular variable and require declarations (off by default) (on by default in the node environment)
                "no-new-require": 2,            // disallow use of new operator with the require function (off by default) (on by default in the node environment)
                "no-path-concat": 2,            // disallow string concatenation with __dirname and __filename (off by default) (on by default in the node environment)
                "no-process-exit": 2,           // disallow process.exit() (on by default in the node environment)
                "no-restricted-modules": 2,     // restrict usage of specified node modules (off by default)
                "no-sync": 2,                   // disallow use of synchronous methods (off by default)
                "callback-return": 2,           // enforce return after a callback
                "global-require": 2,            // disallow require() outside of the top-level module scope


                ////////// Stylistic Issues //////////

                "brace-style": 2,                                                       // enforce one true brace style (off by default)
                "camelcase": [2, {"properties": "always"}],                             // require camel case names
                "comma-spacing": [2, {"before": false, "after": true}],                 // enforce spacing before and after comma
                "comma-style": [2, "last"],                                            // enforce one true comma style (off by default)
                "consistent-this": [2, "self"],                            // enforces consistent naming when capturing the current execution context (off by default)
                "eol-last": 2,                                                          // enforce newline at the end of file, with no multiple empty lines
                "func-names": 2,                // require function expressions to have a name (off by default)
                "func-style": 0,                // enforces use of function declarations or expressions (off by default)
                "id-length": [2, {"min": 2, "max": 40, "properties": "always", "exceptions": ["i", "x", "y", "z"]}],  // enforces min & max identifier lengths
                "id-match": 0,                  // require identifiers to match the provided regular expression
                "indent": [2, 8],               // specify tab or space width for your code (fixable)
                "jsx-quotes": [2, "prefer-double"],  // specify whether double or single quotes should be used in JSX attributes
                "key-spacing": 0,               // enforces spacing between keys and values in object literal properties
                "lines-around-comment": [2, { "beforeLineComment": true, "beforeBlockComment": true }],      // enforce empty lines around comments
                "linebreak-style": [0, "unix"], // disallow mixed 'LF' and 'CRLF' as linebreaks
                "max-nested-callbacks": [2, 3], // specify the maximum depth callbacks can be nested (off by default)
                "new-cap": 2,                   // require a capital letter for constructors
                "new-parens": 2,                // disallow the omission of parentheses when invoking a constructor with no arguments
                "newline-after-var": [2, "always"], // require or disallow an empty newline after variable declarations
                "no-array-constructor": 2,      // disallow use of the Array constructor
                "no-continue": 2,               // disallow use of the continue statement
                "no-inline-comments": 2,        // disallow comments inline after code (off by default)
                "no-lonely-if": 2,              // disallow if as the only statement in an else block (off by default)
                "no-mixed-spaces-and-tabs": [2, "smart-tabs"],  // disallow mixed spaces and tabs for indentation
                "no-multiple-empty-lines": 0,   // disallow multiple empty lines (off by default)
                "no-nested-ternary": 2,         // disallow nested ternary expressions (off by default)
                "no-negated-condition": 2,      // disallow negated conditions
                "no-new-object": 2,             // disallow use of the Object constructor
                "no-restricted-syntax": 0,       // disallow use of certain syntax in code
                "no-spaced-func": 2,            // disallow space between function identifier and application
                "no-ternary": 0,                // disallow the use of ternary operators (off by default)
                "no-trailing-spaces": [2, { "skipBlankLines": true }],  // disallow trailing whitespace at the end of lines
                "no-underscore-dangle": 0,      // disallow dangling underscores in identifiers
                "no-wrap-func": 0,              // disallow wrapping of non-IIFE statements in parens
                "no-unneeded-ternary": 2,        // disallow the use of ternary operators when a simpler alternative exists
                "object-curly-spacing": [2, "never", {
                        "objectsInObjects": true,
                        "arraysInObjects": false
                }],      // require or disallow padding inside curly braces (fixable)
                "one-var": [2, "always"],       // allow just one var statement per function (off by default)
                "operator-assignment": [2, "always"],   // require assignment operator shorthand where possible or prohibit it entirely (off by default)
                "operator-linebreak": [2, "before"],    // enforce operators to be placed before or after line breaks
                "padded-blocks": [2, "never"],         // enforce padding within blocks (off by default)
                "quote-props": [2, "as-needed"],        // require quotes around object literal property names (off by default)
                "quotes": [2, "double", "avoid-escape"],   // specify whether double or single quotes should be used
                "require-jsdoc": 0,             // Require JSDoc comment
                "semi-spacing": [2, {"before": false, "after": true}],  // enforce spacing before and after semicolons
                "semi": [2, "always"],          // require or disallow use of semicolons instead of ASI
                "sort-vars": 0,                 // sort variables within the same declaration block (off by default)
                "keyword-spacing": 2,      // require a space after certain keywords (off by default)
                "space-before-blocks": [2, { "functions": "always", "keywords": "always" }],       // require or disallow space before blocks (off by default)
                "space-before-function-paren": 0,   // require or disallow a space before function opening parenthesis (fixable)
                "space-in-brackets": 0,         // require or disallow spaces inside brackets (off by default)
                "space-in-parens": 0,           // require or disallow spaces inside parentheses (off by default)
                "space-infix-ops": 2,           // require spaces around operators
                "space-unary-ops": 2,           // Require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
                "spaced-comment": [2, "always", { "markers": ["/", "global", "/*", "exported", "eslint"] }],    // require or disallow a space immediately following the // in a line comment (off by default)
                "wrap-regex": 0,                // require regex literals to be wrapped in parentheses (off by default)


                ////////// ECMAScript 6 //////////

                "arrow-parens": [2, "as-needed"], // require parens in arrow function arguments
                "arrow-spacing": 2,             // require space before/after arrow function's arrow (fixable)
                "constructor-super": 2,         // verify calls of super() in constructors
                "generator-star-spacing": [2, {"before": true, "after": true}],    // enforce spacing around the * in generator functions (fixable)
                "no-class-assign": 2,           // disallow modifying variables of class declarations
                "no-const-assign": 2,           // disallow modifying variables that are declared using const
                "no-dupe-class-members": 2,     // disallow duplicate name in class members
                "no-this-before-super": 2,      // disallow use of this/super before calling super() in constructors.
                "no-var": 2,                    // require let or const instead of var
                "object-shorthand": [2, "always"], // require method and property shorthand syntax for object literals
                "prefer-arrow-callback": 2,     // suggest using arrow functions as callbacks
                "prefer-const": 2,              // suggest using const declaration for variables that are never modified after declared
                "prefer-spread": 2,             // suggest using the spread operator instead of .apply().
                "prefer-reflect": [2, { exceptions: ["call"] }],            // suggest using Reflect methods where applicable
                "prefer-template": 2,           // suggest using template literals instead of strings concatenation
                "require-yield": 2,             // disallow generator functions that do not have yield


                ////////// Legacy //////////

                "max-depth": [2, 3],            // specify the maximum depth that blocks can be nested (off by default)
                //"max-len": [2, 80, 8],          // specify the maximum length of a line in your program (off by default)
                "max-params": [2, 3],           // limits the number of parameters that can be used in the function declaration. (off by default)
                "max-statements": [2, 30],      // specify the maximum number of statement allowed in a function (off by default)
                "no-bitwise": 2,                // disallow use of bitwise operators (off by default)
                "no-plusplus": 0,                // disallow use of unary operators, ++ and -- (off by default)

                ///////// JSX - React ////////

                "react/display-name": 0,
                "react/forbid-prop-types": 0,
                "react/jsx-boolean-value": 1,
                "react/jsx-closing-bracket-location": 0,
                "react/jsx-curly-spacing": 1,
                "react/jsx-indent-props": 0,
                "react/jsx-max-props-per-line": [1, {maximum: 3}],
                "react/jsx-no-bind": 1,
                "react/jsx-no-duplicate-props": 1,
                "react/jsx-no-literals": 1,
                "react/jsx-no-undef": 1,
                "react/jsx-quotes": 0,
                "react/jsx-sort-props": 1,
                "react/jsx-uses-react": 1,
                "react/jsx-uses-vars": 1,
                "react/no-danger": 1,
                "react/no-did-mount-set-state": 1,
                "react/no-did-update-set-state": 1,
                "react/no-direct-mutation-state": 1,
                "react/no-multi-comp": 1,
                "react/no-set-state": 0,
                "react/no-unknown-property": 1,
                "react/prefer-es6-class": 1,
                "react/prop-types": 1,
                "react/react-in-jsx-scope": 0,
                "react/require-extension": 1,
                "react/self-closing-comp": 1,
                "react/sort-comp": 1,
                "react/wrap-multilines": 0
        }

}